#include "M5Atom.h"

//
// M5 ATOM display API : https://github.com/m5stack/M5Atom
//

// File URLD:/Download/color.c
// Image Size: width=20,height=5
// Data  Size: 302 
const unsigned char image_color[302]=
{
/* width  020 */ 0x14,
/* height 005 */ 0x05,
/* Line   000 */ 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
/* Line   001 */ 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0xff,0x00,0x00, 0x00,0xff,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, // 
/* Line   002 */ 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, // 
/* Line   003 */ 0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, // 
/* Line   004 */ 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, 0x00,0xff,0x00, // 
};

void setup()
{
    int i ;
    
    M5.begin(true, false, true);
    delay(50);
    M5.dis.clear() ; //drawpix(10, 0xf00000);

    //  void displaybuff(uint8_t *buffptr, int8_t offsetx = 0, int8_t offsety = 0)
    //  offsetx:  往右是負值
    //
    //M5.dis.displaybuff((uint8_t *)image_color,-1,0) ;

    for(i=0;i<10;i++)
    {
      delay(1000) ;
      M5.dis.displaybuff((uint8_t *)image_color,-1*i,0) ;
    }

    //M5.dis.animation((uint8_t *)image_color, 1, LED_Display::kMoveLeft,1) ;
}

uint8_t FSM = 0;

void loop()
{
    if (M5.Btn.wasPressed())
    {

        switch (FSM)
        {
        case 0:
            M5.dis.drawpix(10, 0xf00000);
            M5.dis.drawpix(20, 0xf00000);
            break;
        case 1:
            M5.dis.drawpix(10, 0x00f000);
            M5.dis.drawpix(20, 0x00f000);
            break;
        case 2:
            M5.dis.drawpix(10, 0x0000f0);
            M5.dis.drawpix(20, 0x0000f0);
            break;
        case 3:
            M5.dis.drawpix(10, 0x707070);
            M5.dis.drawpix(20, 0x707070);
            break;
        default:
            break;
        }
        FSM++;
        if (FSM >= 4)
        {
            FSM = 0;
        }
    }

    delay(50);
    M5.update();
}


/*
#include <FastLED.h>

#define NUM_LEDS 25
#define DATA_PIN 27

CRGB leds[NUM_LEDS];

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("");
  Serial.println("Initializing M5Stack Atom Matrix");
  //M5.begin(true, false, true);  //not needed

  // Initialize the FastLED library for this device's configuration
  Serial.println("\nInitializing FastLED");
  //FastLED.addLeds<WS2812, DATA_PIN>(leds, NUM_LEDS);
  FastLED.addLeds<WS2812, DATA_PIN, GRB>(leds, NUM_LEDS);

  // M5Stack recommends not setting this value greater than 20
  // to avoid melting the screen/cover over the LEDs
  Serial.println("Setting brightness");
  FastLED.setBrightness(20);
  Serial.println("Finishing setup");
}

void loop() {
  // Initialize all device LEDs to off (black), one at a time
  Serial.println("Clearing display");
  for(int num=0; num<NUM_LEDS; num++) {
    Serial.println(num);
    leds[num] = CRGB::Black;
    FastLED.show();
    delay(50);
  }
  delay(500);
  // Initialize device LEDs to on (red), one at a time
  Serial.println("Showing LEDs");
  for(int num=0; num<NUM_LEDS; num++) {
    Serial.println(num);
    leds[num] = CRGB::Red;
    FastLED.show(); 
    delay(50);
  }
}
*/
